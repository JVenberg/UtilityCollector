# A generic Alembic configuration file.

[alembic]
# path to migration scripts
script_location = app/db/migrations

# template for migration file names
file_template = %%(rev)s_%%(slug)s

# timezone for revision file timestamps
# timezone =

# database connection url
# This will be overridden by the DATABASE_URL environment variable in env.py
sqlalchemy.url = sqlite:///./data/database.db


[post_write_hooks]
# post_write_hooks defines scripts to execute after generating a migration.
#
# format is:
#
#   hooks = hook_name_1, hook_name_2
#   hook_name_1.type = exec
#   hook_name_1.entrypoint = /path/to/my/script
#   hook_name_2.type = exec
#   hook_name_2.entrypoint = /path/to/my/other/script
#
# The exec hook executes a script, passing the path to the
# newly generated revision file as the only argument.
#
# post_write_hooks are not transactional, and will not be rolled back
# if the migration generation fails.
#
# Running alembic with the --autogenerate flag will not execute the
# post_write_hooks.
#
# hooks =
# my_hook.type = exec
# my_hook.entrypoint = /path/to/my/script

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S